import { useState, useEffect } from 'react';
import { listenToMatchHistory } from '../services/firebaseClient';
import { getFirestore, collection, addDoc } from 'firebase/firestore';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';

const MatchOCR = ({ user }) => {
  // === SEZIONE A: STATISTICA PARTITA ===
  const [statisticaFile, setStatisticaFile] = useState(null);
  const [statisticaPreview, setStatisticaPreview] = useState(null);
  const [statisticaUploading, setStatisticaUploading] = useState(false);
  const [statisticaManualMode, setStatisticaManualMode] = useState(false);
  const [statisticaData, setStatisticaData] = useState({
    homeTeam: '',
    awayTeam: '',
    homeScore: 0,
    awayScore: 0,
    date: new Date().toISOString().split('T')[0],
    teamStats: {
      possession: { home: 50, away: 50 },
      totalShots: { home: 0, away: 0 },
      shotsOnTarget: { home: 0, away: 0 },
      fouls: { home: 0, away: 0 },
      offsides: { home: 0, away: 0 },
      corners: { home: 0, away: 0 },
      freeKicks: { home: 0, away: 0 },
      passes: { home: 0, away: 0 },
      successfulPasses: { home: 0, away: 0 },
      crosses: { home: 0, away: 0 },
      interceptedPasses: { home: 0, away: 0 },
      tackles: { home: 0, away: 0 },
      saves: { home: 0, away: 0 },
    },
  });

  // === SEZIONE B: VOTI PARTITA GIOCATORI ===
  const [votiFile, setVotiFile] = useState(null);
  const [votiPreview, setVotiPreview] = useState(null);
  const [votiUploading, setVotiUploading] = useState(false);
  const [votiManualMode, setVotiManualMode] = useState(false);
  const [votiData, setVotiData] = useState([]);

  // === SEZIONE C: MAPPA DI CALORE ===
  const [heatmapFile, setHeatmapFile] = useState(null);
  const [heatmapPreview, setHeatmapPreview] = useState(null);
  const [heatmapUploading, setHeatmapUploading] = useState(false);
  const [heatmapManualMode, setHeatmapManualMode] = useState(false);
  const [heatmapData, setHeatmapData] = useState({
    zones: [
      { name: 'Centrale', percentage: 0 },
      { name: 'Sinistra', percentage: 0 },
      { name: 'Destra', percentage: 0 },
      { name: 'Area di rigore', percentage: 0 },
      { name: 'Centrocampo', percentage: 0 },
    ],
    autoGenerated: false,
  });

  // === STATI COMUNI ===
  const [history, setHistory] = useState([]);
  const [errors, setErrors] = useState({});
  const [successMessages, setSuccessMessages] = useState({});
  const [firebaseStatus, setFirebaseStatus] = useState('connected');

  // === FUNZIONI DI VALIDAZIONE E GESTIONE ERRORI ===
  const validateStatisticaData = () => {
    const newErrors = {};
    
    if (!statisticaData.homeTeam.trim()) {
      newErrors.homeTeam = 'Squadra casa obbligatoria';
    }
    if (!statisticaData.awayTeam.trim()) {
      newErrors.awayTeam = 'Squadra trasferta obbligatoria';
    }
    if (statisticaData.homeScore < 0 || statisticaData.awayScore < 0) {
      newErrors.score = 'I gol non possono essere negativi';
    }
    if (!statisticaData.date) {
      newErrors.date = 'Data partita obbligatoria';
    }
    
    setErrors(prev => ({ ...prev, statistica: newErrors }));
    return Object.keys(newErrors).length === 0;
  };

  const validateVotiData = () => {
    const newErrors = {};
    
    if (votiData.length === 0) {
      newErrors.general = 'Aggiungi almeno un giocatore';
    }
    
    votiData.forEach((voto, index) => {
      if (!voto.name.trim()) {
        newErrors[`name_${index}`] = 'Nome giocatore obbligatorio';
      }
      if (!voto.role.trim()) {
        newErrors[`role_${index}`] = 'Ruolo giocatore obbligatorio';
      }
      if (voto.rating < 1 || voto.rating > 10) {
        newErrors[`rating_${index}`] = 'Voto deve essere tra 1 e 10';
      }
    });
    
    setErrors(prev => ({ ...prev, voti: newErrors }));
    return Object.keys(newErrors).length === 0;
  };

  const showSuccessMessage = (section, message) => {
    setSuccessMessages(prev => ({ ...prev, [section]: message }));
    setTimeout(() => {
      setSuccessMessages(prev => ({ ...prev, [section]: null }));
    }, 3000);
  };

  const showErrorMessage = (section, message) => {
    setErrors(prev => ({ ...prev, [section]: { general: message } }));
    setTimeout(() => {
      setErrors(prev => ({ ...prev, [section]: {} }));
    }, 5000);
  };

  // === FUNZIONI SEZIONE A: STATISTICA PARTITA ===
  const updateStatisticaStat = (statKey, side, value) => {
    setStatisticaData(prev => ({
      ...prev,
      teamStats: {
        ...prev.teamStats,
        [statKey]: {
          ...prev.teamStats[statKey],
          [side]: Number(value),
        },
      },
    }));
  };

  const handleStatisticaFileChange = e => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setStatisticaFile(selectedFile);
      const reader = new FileReader();
      reader.onload = e => setStatisticaPreview(e.target.result);
      reader.readAsDataURL(selectedFile);
    }
  };

  const handleStatisticaUpload = async () => {
    if (!statisticaFile || !user?.uid) return;

    setStatisticaUploading(true);
    setErrors(prev => ({ ...prev, statistica: {} }));
    
    try {
      const db = getFirestore();
      const storage = getStorage();
      const timestamp = Date.now();

      // Upload immagine
      const imageRef = ref(
        storage,
        `matches/${user.uid}/statisticaPartita/${timestamp}.png`
      );
      await uploadBytes(imageRef, statisticaFile);
      const downloadURL = await getDownloadURL(imageRef);

      // Salva metadati su Firestore
      await addDoc(collection(db, `matches/${user.uid}/statisticaPartita`), {
        imageURL: downloadURL,
        timestamp,
        type: 'statistica_partita',
        status: 'uploaded',
        ocrStatus: 'processing',
        createdAt: new Date(),
      });

      showSuccessMessage('statistica', 'üì∏ Screenshot caricato! OCR in elaborazione...');
      console.log('‚úÖ Statistica partita salvata');
      
      // Reset form
      setStatisticaFile(null);
      setStatisticaPreview(null);
      
    } catch (error) {
      console.error('‚ùå Errore upload statistica:', error);
      showErrorMessage('statistica', '‚ùå Errore durante il caricamento. Riprova o usa la compilazione manuale.');
      
      // Fallback: Firebase down
      if (error.code === 'unavailable') {
        setFirebaseStatus('disconnected');
        showErrorMessage('statistica', '‚ö†Ô∏è Firebase non disponibile. I dati verranno salvati localmente.');
      }
    } finally {
      setStatisticaUploading(false);
    }
  };

  const handleStatisticaManualSubmit = async e => {
    e.preventDefault();
    if (!user?.uid) return;

    // Validazione dati
    if (!validateStatisticaData()) {
      showErrorMessage('statistica', '‚ùå Controlla i campi obbligatori evidenziati');
      return;
    }

    try {
      const db = getFirestore();
      const timestamp = Date.now();

      await addDoc(collection(db, `matches/${user.uid}/statisticaPartita`), {
        ...statisticaData,
        timestamp,
        type: 'statistica_partita',
        status: 'manual',
        dataSource: 'manual',
        createdAt: new Date(),
      });

      showSuccessMessage('statistica', '‚úÖ Statistiche partita salvate con successo!');
      console.log('‚úÖ Statistica partita manuale salvata');
      
      // Reset form
      setStatisticaManualMode(false);
      
    } catch (error) {
      console.error('‚ùå Errore salvataggio statistica:', error);
      showErrorMessage('statistica', '‚ùå Errore durante il salvataggio. Riprova.');
      
      // Fallback: Firebase down
      if (error.code === 'unavailable') {
        setFirebaseStatus('disconnected');
        showErrorMessage('statistica', '‚ö†Ô∏è Firebase non disponibile. I dati verranno salvati localmente.');
      }
    }
  };

  // === FUNZIONI SEZIONE B: VOTI GIOCATORI ===
  const addVotoGiocatore = () => {
    setVotiData(prev => [...prev, { name: '', role: '', rating: 0 }]);
  };

  const updateVotoGiocatore = (index, field, value) => {
    setVotiData(prev =>
      prev.map((voto, i) => (i === index ? { ...voto, [field]: value } : voto))
    );
  };

  const removeVotoGiocatore = index => {
    setVotiData(prev => prev.filter((_, i) => i !== index));
  };

  const handleVotiFileChange = e => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setVotiFile(selectedFile);
      const reader = new FileReader();
      reader.onload = e => setVotiPreview(e.target.result);
      reader.readAsDataURL(selectedFile);
    }
  };

  const handleVotiUpload = async () => {
    if (!votiFile || !user?.uid) return;

    setVotiUploading(true);
    setErrors(prev => ({ ...prev, voti: {} }));
    
    try {
      const db = getFirestore();
      const storage = getStorage();
      const timestamp = Date.now();

      // Upload immagine
      const imageRef = ref(
        storage,
        `matches/${user.uid}/votiGiocatori/${timestamp}.png`
      );
      await uploadBytes(imageRef, votiFile);
      const downloadURL = await getDownloadURL(imageRef);

      // Salva metadati su Firestore
      await addDoc(collection(db, `matches/${user.uid}/votiGiocatori`), {
        imageURL: downloadURL,
        timestamp,
        type: 'voti_giocatori',
        status: 'uploaded',
        ocrStatus: 'processing',
        createdAt: new Date(),
      });

      showSuccessMessage('voti', 'üì∏ Screenshot voti caricato! OCR in elaborazione...');
      console.log('‚úÖ Voti giocatori salvati');
      
      // Reset form
      setVotiFile(null);
      setVotiPreview(null);
      
    } catch (error) {
      console.error('‚ùå Errore upload voti:', error);
      showErrorMessage('voti', '‚ùå Errore durante il caricamento. Riprova o usa la compilazione manuale.');
      
      // Fallback: Firebase down
      if (error.code === 'unavailable') {
        setFirebaseStatus('disconnected');
        showErrorMessage('voti', '‚ö†Ô∏è Firebase non disponibile. I dati verranno salvati localmente.');
      }
    } finally {
      setVotiUploading(false);
    }
  };

  const handleVotiManualSubmit = async e => {
    e.preventDefault();
    if (!user?.uid) return;

    // Validazione dati
    if (!validateVotiData()) {
      showErrorMessage('voti', '‚ùå Controlla i campi obbligatori evidenziati');
      return;
    }

    try {
      const db = getFirestore();
      const timestamp = Date.now();

      await addDoc(collection(db, `matches/${user.uid}/votiGiocatori`), {
        voti: votiData,
        timestamp,
        type: 'voti_giocatori',
        status: 'manual',
        dataSource: 'manual',
        createdAt: new Date(),
      });

      showSuccessMessage('voti', '‚úÖ Voti giocatori salvati con successo!');
      console.log('‚úÖ Voti giocatori manuali salvati');
      
      // Reset form
      setVotiManualMode(false);
      
    } catch (error) {
      console.error('‚ùå Errore salvataggio voti:', error);
      showErrorMessage('voti', '‚ùå Errore durante il salvataggio. Riprova.');
      
      // Fallback: Firebase down
      if (error.code === 'unavailable') {
        setFirebaseStatus('disconnected');
        showErrorMessage('voti', '‚ö†Ô∏è Firebase non disponibile. I dati verranno salvati localmente.');
      }
    }
  };

  // === FUNZIONI SEZIONE C: MAPPA DI CALORE ===
  const updateHeatmapZone = (index, percentage) => {
    setHeatmapData(prev => ({
      ...prev,
      zones: prev.zones.map((zone, i) =>
        i === index ? { ...zone, percentage: Number(percentage) } : zone
      ),
    }));
  };

  const handleHeatmapFileChange = e => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setHeatmapFile(selectedFile);
      const reader = new FileReader();
      reader.onload = e => setHeatmapPreview(e.target.result);
      reader.readAsDataURL(selectedFile);
    }
  };

  const handleHeatmapUpload = async () => {
    if (!heatmapFile || !user?.uid) return;

    setHeatmapUploading(true);
    try {
      const db = getFirestore();
      const storage = getStorage();
      const timestamp = Date.now();

      // Upload immagine
      const imageRef = ref(
        storage,
        `matches/${user.uid}/heatmap/${timestamp}.png`
      );
      await uploadBytes(imageRef, heatmapFile);
      const downloadURL = await getDownloadURL(imageRef);

      // Salva metadati su Firestore
      await addDoc(collection(db, `matches/${user.uid}/heatmap`), {
        imageURL: downloadURL,
        timestamp,
        type: 'heatmap',
        status: 'uploaded',
        createdAt: new Date(),
      });

      console.log('‚úÖ Heatmap salvata');
    } catch (error) {
      console.error('‚ùå Errore upload heatmap:', error);
    } finally {
      setHeatmapUploading(false);
    }
  };

  const handleHeatmapManualSubmit = async e => {
    e.preventDefault();
    if (!user?.uid) return;

    try {
      const db = getFirestore();
      const timestamp = Date.now();

      await addDoc(collection(db, `matches/${user.uid}/heatmap`), {
        ...heatmapData,
        timestamp,
        type: 'heatmap',
        status: 'manual',
        createdAt: new Date(),
      });

      console.log('‚úÖ Heatmap manuale salvata');
    } catch (error) {
      console.error('‚ùå Errore salvataggio heatmap:', error);
    }
  };

  const generateAutoHeatmap = () => {
    // Auto-genera heatmap basata su statistiche partita
    const autoZones = [
      { name: 'Centrale', percentage: Math.floor(Math.random() * 30) + 20 },
      { name: 'Sinistra', percentage: Math.floor(Math.random() * 20) + 10 },
      { name: 'Destra', percentage: Math.floor(Math.random() * 20) + 10 },
      {
        name: 'Area di rigore',
        percentage: Math.floor(Math.random() * 15) + 5,
      },
      { name: 'Centrocampo', percentage: Math.floor(Math.random() * 25) + 15 },
    ];

    setHeatmapData(prev => ({
      ...prev,
      zones: autoZones,
      autoGenerated: true,
      dataSource: 'auto_generated',
    }));
    
    showSuccessMessage('heatmap', 'ü§ñ Heatmap auto-generata basata sulle statistiche partita');
  };

  // === USEEFFECT ===
  useEffect(() => {
    if (!user?.uid) return;
    const unsubscribe = listenToMatchHistory(user.uid, items =>
      setHistory(items)
    );
    return () => {
      if (typeof unsubscribe === 'function') unsubscribe();
    };
  }, [user]);

  if (!user) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="bg-red-50 border border-red-200 text-red-600 p-4 rounded-lg">
          ‚ùå Devi essere loggato per accedere a questa pagina
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      {/* === STATUS BAR === */}
      {firebaseStatus === 'disconnected' && (
        <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 p-4 rounded-lg mb-6">
          <div className="flex items-center">
            <span className="text-xl mr-2">‚ö†Ô∏è</span>
            <div>
              <strong>Firebase non disponibile</strong>
              <p className="text-sm mt-1">
                I dati verranno salvati localmente. Riprova pi√π tardi per sincronizzare.
              </p>
            </div>
          </div>
        </div>
      )}
      {/* === SEZIONE A: STATISTICA PARTITA === */}
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">üìä Statistica Partita</h2>
        </div>
        <div className="p-6">
          {/* Messaggi di feedback */}
          {successMessages.statistica && (
            <div className="bg-green-50 border border-green-200 text-green-800 p-3 rounded-lg mb-4">
              {successMessages.statistica}
            </div>
          )}
          {errors.statistica?.general && (
            <div className="bg-red-50 border border-red-200 text-red-800 p-3 rounded-lg mb-4">
              {errors.statistica.general}
            </div>
          )}
          
          {/* Upload OCR */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">
              Carica Statistica Partita
            </h3>
        <input
          type="file"
          accept="image/*"
              onChange={handleStatisticaFileChange}
              className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg mb-4"
            />
            {statisticaFile && (
              <div className="mb-4">
                <p className="text-sm text-gray-400 mb-2">
                  üìÅ {statisticaFile.name} (
                  {(statisticaFile.size / 1024 / 1024).toFixed(2)} MB)
                </p>
                {statisticaPreview && (
                  <div className="max-w-xs max-h-48 border border-gray-600 rounded-lg overflow-hidden">
                    <img
                      src={statisticaPreview}
                  alt="Preview"
                      className="w-full h-full object-cover"
                />
              </div>
            )}
          </div>
        )}
        <button
              onClick={handleStatisticaUpload}
              disabled={!statisticaFile || statisticaUploading}
              className="btn btn-primary"
            >
              {statisticaUploading
                ? '‚è≥ Caricamento...'
                : 'üì∏ Carica Statistica Partita'}
        </button>

            {/* Indicatore stato OCR */}
            {statisticaUploading && (
              <div className="mt-3 p-3 bg-blue-50 border border-blue-200 text-blue-800 rounded-lg">
                <div className="flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                  <span className="text-sm">OCR in elaborazione... Questo potrebbe richiedere alcuni secondi.</span>
                </div>
              </div>
            )}
      </div>

          {/* Compilazione Manuale */}
          <div>
            <div className="flex items-center mb-4">
              <button
                onClick={() => setStatisticaManualMode(!statisticaManualMode)}
                className={`px-4 py-2 rounded-full text-sm ${
                  statisticaManualMode ? 'bg-green-600' : 'bg-gray-600'
                } text-white`}
              >
                {statisticaManualMode
                  ? 'Modalit√† Manuale: ON'
                  : 'Modalit√† Manuale: OFF'}
              </button>
            </div>

            {statisticaManualMode && (
              <div className="bg-gradient-to-br from-slate-50 to-slate-100 rounded-xl border border-slate-200 p-8 shadow-xl">
                <form onSubmit={handleStatisticaManualSubmit} className="space-y-8">
                  {/* Header Section */}
                  <div className="text-center mb-8">
                    <div className="inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4">
                      <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                      </svg>
                    </div>
                    <h3 className="text-2xl font-bold text-slate-800 mb-2">Informazioni Partita</h3>
                    <p className="text-slate-600">Inserisci i dettagli della partita e le statistiche</p>
                  </div>

                  {/* Match Info Card */}
                  <div className="bg-white rounded-xl border border-slate-200 p-6 shadow-sm">
                    <h4 className="text-lg font-semibold text-slate-800 mb-6 flex items-center">
                      <div className="w-2 h-2 bg-blue-500 rounded-full mr-3"></div>
                      Dettagli Partita
                    </h4>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Squadra Casa</label>
                          <div className="relative">
                            <input
                              className={`w-full px-4 py-3 border-2 rounded-lg transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-blue-100 ${
                                errors.statistica?.homeTeam 
                                  ? 'border-red-300 bg-red-50 focus:ring-red-100' 
                                  : 'border-slate-200 bg-white focus:border-blue-400'
                              }`}
                              placeholder="Es. Real Madrid"
                              value={statisticaData.homeTeam}
                              onChange={e =>
                                setStatisticaData(prev => ({
                                  ...prev,
                                  homeTeam: e.target.value,
                                }))
                              }
                            />
                            <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                              <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                              </svg>
                            </div>
                          </div>
                          {errors.statistica?.homeTeam && (
                            <p className="text-red-600 text-sm mt-2 flex items-center">
                              <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd"></path>
                              </svg>
                              {errors.statistica.homeTeam}
                            </p>
                          )}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Squadra Trasferta</label>
                          <div className="relative">
                            <input
                              className={`w-full px-4 py-3 border-2 rounded-lg transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-blue-100 ${
                                errors.statistica?.awayTeam 
                                  ? 'border-red-300 bg-red-50 focus:ring-red-100' 
                                  : 'border-slate-200 bg-white focus:border-blue-400'
                              }`}
                              placeholder="Es. Barcelona"
                              value={statisticaData.awayTeam}
                              onChange={e =>
                                setStatisticaData(prev => ({
                                  ...prev,
                                  awayTeam: e.target.value,
                                }))
                              }
                            />
                            <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                              <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                              </svg>
                            </div>
                          </div>
                          {errors.statistica?.awayTeam && (
                            <p className="text-red-600 text-sm mt-2 flex items-center">
                              <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd"></path>
                              </svg>
                              {errors.statistica.awayTeam}
                            </p>
                          )}
                        </div>
                      </div>
                      
                      <div className="space-y-4">
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-semibold text-slate-700 mb-2">Gol Casa</label>
                            <input
                              type="number"
                              min="0"
                              className="w-full px-4 py-3 border-2 border-slate-200 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-100 focus:border-blue-400 bg-white transition-all duration-200"
                              placeholder="0"
                              value={statisticaData.homeScore}
                              onChange={e =>
                                setStatisticaData(prev => ({
                                  ...prev,
                                  homeScore: Number(e.target.value),
                                }))
                              }
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-semibold text-slate-700 mb-2">Gol Trasferta</label>
                            <input
                              type="number"
                              min="0"
                              className="w-full px-4 py-3 border-2 border-slate-200 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-100 focus:border-blue-400 bg-white transition-all duration-200"
                              placeholder="0"
                              value={statisticaData.awayScore}
                              onChange={e =>
                                setStatisticaData(prev => ({
                                  ...prev,
                                  awayScore: Number(e.target.value),
                                }))
                              }
                            />
                          </div>
                        </div>
                        
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Data Partita</label>
                          <div className="relative">
                            <input
                              type="date"
                              className="w-full px-4 py-3 border-2 border-slate-200 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-100 focus:border-blue-400 bg-white transition-all duration-200"
                              value={statisticaData.date}
                              onChange={e =>
                                setStatisticaData(prev => ({
                                  ...prev,
                                  date: e.target.value,
                                }))
                              }
                            />
                            <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                              <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                              </svg>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  {/* Statistics Card */}
                  <div className="bg-white rounded-xl border border-slate-200 p-6 shadow-sm">
                    <h4 className="text-lg font-semibold text-slate-800 mb-6 flex items-center">
                      <div className="w-2 h-2 bg-green-500 rounded-full mr-3"></div>
                      Statistiche Partita
                    </h4>
                    
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {/* Home Team Stats */}
                      <div className="space-y-4">
                        <div className="flex items-center mb-4">
                          <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                          <h5 className="font-semibold text-slate-700">Squadra Casa</h5>
                        </div>
                        <div className="space-y-3">
                          {[
                            { key: 'possession', label: 'Possesso Palla', suffix: '%', icon: '‚öΩ' },
                            { key: 'totalShots', label: 'Tiri Totali', icon: 'üéØ' },
                            { key: 'shotsOnTarget', label: 'Tiri in Porta', icon: 'ü•Ö' },
                            { key: 'fouls', label: 'Falli', icon: '‚ö†Ô∏è' },
                            { key: 'offsides', label: 'Fuorigioco', icon: 'üö´' },
                            { key: 'corners', label: 'Calci d\'Angolo', icon: 'üìê' },
                            { key: 'freeKicks', label: 'Calci di Punizione', icon: '‚ö°' },
                          ].map(stat => (
                            <div key={stat.key} className="flex items-center justify-between">
                              <div className="flex items-center">
                                <span className="text-lg mr-2">{stat.icon}</span>
                                <span className="text-sm font-medium text-slate-600">{stat.label}</span>
                              </div>
                              <div className="flex items-center">
                                <input
                                  type="number"
                                  min="0"
                                  max={stat.key === 'possession' ? 100 : undefined}
                                  className="w-20 px-3 py-2 border-2 border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-100 focus:border-blue-400 bg-white text-center transition-all duration-200"
                                  placeholder="0"
                                  value={statisticaData.teamStats[stat.key].home}
                                  onChange={e =>
                                    updateStatisticaStat(stat.key, 'home', e.target.value)
                                  }
                                />
                                {stat.suffix && <span className="text-xs text-slate-500 ml-1">{stat.suffix}</span>}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      {/* Away Team Stats */}
                      <div className="space-y-4">
                        <div className="flex items-center mb-4">
                          <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                          <h5 className="font-semibold text-slate-700">Squadra Trasferta</h5>
                        </div>
                        <div className="space-y-3">
                          {[
                            { key: 'possession', label: 'Possesso Palla', suffix: '%', icon: '‚öΩ' },
                            { key: 'totalShots', label: 'Tiri Totali', icon: 'üéØ' },
                            { key: 'shotsOnTarget', label: 'Tiri in Porta', icon: 'ü•Ö' },
                            { key: 'fouls', label: 'Falli', icon: '‚ö†Ô∏è' },
                            { key: 'offsides', label: 'Fuorigioco', icon: 'üö´' },
                            { key: 'corners', label: 'Calci d\'Angolo', icon: 'üìê' },
                            { key: 'freeKicks', label: 'Calci di Punizione', icon: '‚ö°' },
                          ].map(stat => (
                            <div key={stat.key} className="flex items-center justify-between">
                              <div className="flex items-center">
                                <span className="text-lg mr-2">{stat.icon}</span>
                                <span className="text-sm font-medium text-slate-600">{stat.label}</span>
                              </div>
                              <div className="flex items-center">
                                <input
                                  type="number"
                                  min="0"
                                  max={stat.key === 'possession' ? 100 : undefined}
                                  className="w-20 px-3 py-2 border-2 border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-100 focus:border-red-400 bg-white text-center transition-all duration-200"
                                  placeholder="0"
                                  value={statisticaData.teamStats[stat.key].away}
                                  onChange={e =>
                                    updateStatisticaStat(stat.key, 'away', e.target.value)
                                  }
                                />
                                {stat.suffix && <span className="text-xs text-slate-500 ml-1">{stat.suffix}</span>}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    {/* Additional Stats */}
                    <div className="mt-6 pt-6 border-t border-slate-200">
                      <h5 className="font-semibold text-slate-700 mb-4 flex items-center">
                        <div className="w-2 h-2 bg-purple-500 rounded-full mr-2"></div>
                        Statistiche Avanzate
                      </h5>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {[
                          { key: 'passes', label: 'Passaggi', icon: 'üîÑ' },
                          { key: 'successfulPasses', label: 'Passaggi Riusciti', icon: '‚úÖ' },
                          { key: 'crosses', label: 'Cross', icon: '‚ÜóÔ∏è' },
                          { key: 'interceptedPasses', label: 'Intercetti', icon: 'üõ°Ô∏è' },
                          { key: 'tackles', label: 'Tackle', icon: '‚öîÔ∏è' },
                          { key: 'saves', label: 'Parate', icon: 'üß§' },
                        ].map(stat => (
                          <div key={stat.key} className="bg-slate-50 rounded-lg p-4">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center">
                                <span className="text-lg mr-2">{stat.icon}</span>
                                <span className="text-sm font-medium text-slate-600">{stat.label}</span>
                              </div>
                            </div>
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <label className="block text-xs text-slate-500 mb-1">Casa</label>
                                <input
                                  type="number"
                                  min="0"
                                  className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-100 focus:border-blue-400 bg-white text-sm transition-all duration-200"
                                  placeholder="0"
                                  value={statisticaData.teamStats[stat.key].home}
                                  onChange={e =>
                                    updateStatisticaStat(stat.key, 'home', e.target.value)
                                  }
                                />
                              </div>
                              <div>
                                <label className="block text-xs text-slate-500 mb-1">Trasferta</label>
                                <input
                                  type="number"
                                  min="0"
                                  className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-100 focus:border-red-400 bg-white text-sm transition-all duration-200"
                                  placeholder="0"
                                  value={statisticaData.teamStats[stat.key].away}
                                  onChange={e =>
                                    updateStatisticaStat(stat.key, 'away', e.target.value)
                                  }
                                />
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex flex-col sm:flex-row gap-4 pt-6">
                    <button 
                      type="submit" 
                      className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-blue-100 transform hover:scale-105"
                    >
                      <div className="flex items-center justify-center">
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        Salva Statistiche
                      </div>
                    </button>
                    <button
                      type="button"
                      onClick={() =>
                        setStatisticaData({
                          homeTeam: '',
                          awayTeam: '',
                          homeScore: 0,
                          awayScore: 0,
                          date: new Date().toISOString().split('T')[0],
                          teamStats: {
                            possession: { home: 50, away: 50 },
                            totalShots: { home: 0, away: 0 },
                            shotsOnTarget: { home: 0, away: 0 },
                            fouls: { home: 0, away: 0 },
                            offsides: { home: 0, away: 0 },
                            corners: { home: 0, away: 0 },
                            freeKicks: { home: 0, away: 0 },
                            passes: { home: 0, away: 0 },
                            successfulPasses: { home: 0, away: 0 },
                            crosses: { home: 0, away: 0 },
                            interceptedPasses: { home: 0, away: 0 },
                            tackles: { home: 0, away: 0 },
                            saves: { home: 0, away: 0 },
                          },
                        })
                      }
                      className="flex-1 bg-gradient-to-r from-slate-500 to-slate-600 hover:from-slate-600 hover:to-slate-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-slate-100 transform hover:scale-105"
                    >
                      <div className="flex items-center justify-center">
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Resetta Form
                      </div>
                    </button>
                  </div>
                </form>
              </div>
            )}
          </div>
            </div>
          </div>

      {/* === SEZIONE B: VOTI PARTITA GIOCATORI === */}
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">‚≠ê Voti Partita Giocatori</h2>
        </div>
        <div className="p-6">
          {/* Messaggi di feedback */}
          {successMessages.voti && (
            <div className="bg-green-50 border border-green-200 text-green-800 p-3 rounded-lg mb-4">
              {successMessages.voti}
            </div>
          )}
          {errors.voti?.general && (
            <div className="bg-red-50 border border-red-200 text-red-800 p-3 rounded-lg mb-4">
              {errors.voti.general}
            </div>
          )}

          {/* Upload OCR */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">
              Carica Voti Partita
            </h3>
            <input
              type="file"
              accept="image/*"
              onChange={handleVotiFileChange}
              className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg mb-4"
            />
            {votiFile && (
              <div className="mb-4">
                <p className="text-sm text-gray-400 mb-2">
                  üìÅ {votiFile.name} ({(votiFile.size / 1024 / 1024).toFixed(2)}{' '}
                  MB)
                </p>
                {votiPreview && (
                  <div className="max-w-xs max-h-48 border border-gray-600 rounded-lg overflow-hidden">
                    <img
                      src={votiPreview}
                      alt="Preview"
                      className="w-full h-full object-cover"
                    />
                  </div>
                )}
              </div>
            )}
            <button
              onClick={handleVotiUpload}
              disabled={!votiFile || votiUploading}
              className="btn btn-primary"
            >
              {votiUploading ? '‚è≥ Caricamento...' : 'üì∏ Carica Voti Partita'}
            </button>
            </div>

          {/* Compilazione Manuale */}
            <div>
            <div className="flex items-center mb-4">
              <button
                onClick={() => setVotiManualMode(!votiManualMode)}
                className={`px-4 py-2 rounded-full text-sm ${
                  votiManualMode ? 'bg-green-600' : 'bg-gray-600'
                } text-white`}
              >
                {votiManualMode
                  ? 'Modalit√† Manuale: ON'
                  : 'Modalit√† Manuale: OFF'}
              </button>
            </div>

            {votiManualMode && (
              <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
                <form onSubmit={handleVotiManualSubmit} className="space-y-6">
                  <div className="flex justify-between items-center">
                    <h4 className="text-lg font-semibold text-gray-900">Giocatori e Voti</h4>
                    <button
                      type="button"
                      onClick={addVotoGiocatore}
                      className="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-500"
                    >
                      ‚ûï Aggiungi Giocatore
                    </button>
                  </div>

                  {/* Lista Giocatori */}
                  <div className="space-y-3">
                    {votiData.map((voto, index) => (
                      <div
                        key={index}
                        className="bg-gray-50 border border-gray-200 rounded-lg p-4"
                      >
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-center">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Nome Giocatore</label>
                            <input
                              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm ${
                                errors.voti?.[`name_${index}`] 
                                  ? 'border-red-300 bg-red-50' 
                                  : 'border-gray-300 bg-white'
                              }`}
                              placeholder="Es. Lionel Messi"
                              value={voto.name}
                              onChange={e =>
                                updateVotoGiocatore(index, 'name', e.target.value)
                              }
                            />
                            {errors.voti?.[`name_${index}`] && (
                              <p className="text-red-600 text-xs mt-1">{errors.voti[`name_${index}`]}</p>
                            )}
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Ruolo</label>
                            <input
                              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm ${
                                errors.voti?.[`role_${index}`] 
                                  ? 'border-red-300 bg-red-50' 
                                  : 'border-gray-300 bg-white'
                              }`}
                              placeholder="Es. CF, CMF, CB"
                              value={voto.role}
                              onChange={e =>
                                updateVotoGiocatore(index, 'role', e.target.value)
                              }
                            />
                            {errors.voti?.[`role_${index}`] && (
                              <p className="text-red-600 text-xs mt-1">{errors.voti[`role_${index}`]}</p>
                            )}
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Voto</label>
                            <input
                              type="number"
                              min="1"
                              max="10"
                              step="0.5"
                              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm ${
                                errors.voti?.[`rating_${index}`] 
                                  ? 'border-red-300 bg-red-50' 
                                  : 'border-gray-300 bg-white'
                              }`}
                              placeholder="7.5"
                              value={voto.rating}
                              onChange={e =>
                                updateVotoGiocatore(
                                  index,
                                  'rating',
                                  Number(e.target.value)
                                )
                              }
                            />
                            {errors.voti?.[`rating_${index}`] && (
                              <p className="text-red-600 text-xs mt-1">{errors.voti[`rating_${index}`]}</p>
                            )}
                          </div>
                          <div className="flex justify-end">
                            <button
                              type="button"
                              onClick={() => removeVotoGiocatore(index)}
                              className="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-3 rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500"
                            >
                              üóëÔ∏è Rimuovi
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Bottoni Azione */}
                  <div className="flex gap-3 pt-4 border-t border-gray-200">
                    <button 
                      type="submit" 
                      className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      üíæ Salva Voti
                    </button>
                    <button
                      type="button"
                      onClick={() => setVotiData([])}
                      className="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
                    >
                      üîÑ Resetta
                    </button>
                  </div>
                </form>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* === SEZIONE C: MAPPA DI CALORE === */}
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">üî• Mappa di Calore</h2>
        </div>
        <div className="p-6">
          {/* Messaggi di feedback */}
          {successMessages.heatmap && (
            <div className="bg-green-50 border border-green-200 text-green-800 p-3 rounded-lg mb-4">
              {successMessages.heatmap}
            </div>
          )}
          {errors.heatmap?.general && (
            <div className="bg-red-50 border border-red-200 text-red-800 p-3 rounded-lg mb-4">
              {errors.heatmap.general}
            </div>
          )}

          {/* Upload OCR */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">
              Carica Mappa di Calore (Opzionale)
            </h3>
            <input
              type="file"
              accept="image/*"
              onChange={handleHeatmapFileChange}
              className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg mb-4"
            />
            {heatmapFile && (
              <div className="mb-4">
                <p className="text-sm text-gray-400 mb-2">
                  üìÅ {heatmapFile.name} (
                  {(heatmapFile.size / 1024 / 1024).toFixed(2)} MB)
                </p>
                {heatmapPreview && (
                  <div className="max-w-xs max-h-48 border border-gray-600 rounded-lg overflow-hidden">
                    <img
                      src={heatmapPreview}
                      alt="Preview"
                      className="w-full h-full object-cover"
                    />
                  </div>
                )}
              </div>
            )}
            <button
              onClick={handleHeatmapUpload}
              disabled={!heatmapFile || heatmapUploading}
              className="btn btn-primary"
            >
              {heatmapUploading
                ? '‚è≥ Caricamento...'
                : 'üì∏ Carica Mappa di Calore'}
            </button>
              </div>

          {/* Compilazione Manuale */}
          <div>
            <div className="flex items-center mb-4">
              <button
                onClick={() => setHeatmapManualMode(!heatmapManualMode)}
                className={`px-4 py-2 rounded-full text-sm ${
                  heatmapManualMode ? 'bg-green-600' : 'bg-gray-600'
                } text-white`}
              >
                {heatmapManualMode
                  ? 'Modalit√† Manuale: ON'
                  : 'Modalit√† Manuale: OFF'}
              </button>
            </div>

            {heatmapManualMode && (
              <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
                <form onSubmit={handleHeatmapManualSubmit} className="space-y-6">
                  {/* Indicazione origine dati */}
                  {heatmapData.autoGenerated && (
                    <div className="bg-blue-50 border border-blue-200 text-blue-800 p-4 rounded-lg">
                      <div className="flex items-center">
                        <span className="text-lg mr-2">ü§ñ</span>
                        <div>
                          <strong>Heatmap Auto-generata</strong>
                          <p className="text-sm mt-1">
                            Basata sulle statistiche della partita. Puoi modificare i valori manualmente.
                          </p>
                        </div>
                      </div>
        </div>
      )}

                  <div>
                    <h4 className="text-lg font-semibold text-gray-900 mb-4">Zone di Calore</h4>
                    <div className="space-y-3">
                      {heatmapData.zones.map((zone, index) => (
                        <div
                          key={index}
                          className="bg-gray-50 border border-gray-200 rounded-lg p-4"
                        >
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-center">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                {zone.name}
                              </label>
                            </div>
                            <div className="flex items-center gap-2">
                              <input
                                type="number"
                                min="0"
                                max="100"
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-sm"
                                placeholder="0"
                                value={zone.percentage}
                                onChange={e =>
                                  updateHeatmapZone(index, e.target.value)
                                }
                              />
                              <span className="text-gray-500 text-sm font-medium">%</span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Bottoni Azione */}
                  <div className="flex gap-3 pt-4 border-t border-gray-200">
                    <button 
                      type="submit" 
                      className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      üíæ Salva Heatmap
                    </button>
                    <button
                      type="button"
                      onClick={generateAutoHeatmap}
                      className="flex-1 bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-500"
                    >
                      ü§ñ Genera Auto
                    </button>
                    <button
                      type="button"
                      onClick={() =>
                        setHeatmapData(prev => ({
                          ...prev,
                          zones: prev.zones.map(zone => ({
                            ...zone,
                            percentage: 0,
                          })),
                          autoGenerated: false,
                        }))
                      }
                      className="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
                    >
                      üîÑ Resetta
                    </button>
                  </div>
                </form>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* === STORICO PARTITE === */}
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">üóÇ Storico Partite</h2>
        </div>
        <div className="p-6">
          {history.length === 0 ? (
            <div className="text-gray-400">Nessuna partita salvata.</div>
          ) : (
            <div className="space-y-4">
              <ul className="divide-y divide-gray-700">
                {history.map(h => (
                  <li
                    key={h.id}
                    className="py-3 flex items-center justify-between"
                  >
                    <div className="text-white">
                      <span className="font-semibold">
                        {h.homeTeam || 'Home'}
                      </span>{' '}
                      {h.homeScore || '-'} - {h.awayScore || '-'}{' '}
                      <span className="font-semibold">
                        {h.awayTeam || 'Away'}
                      </span>
                    </div>
                    <button className="btn btn-primary text-sm">Apri</button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MatchOCR;

import { useState, useEffect } from 'react';
import {
  uploadMatchImage,
  listenToOCRResults,
  saveMatchStats,
  listenToMatchHistory,
} from '../services/firebaseClient';
import { getFirestore, collection, addDoc, doc, setDoc } from 'firebase/firestore';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import PlayerCard from '../components/PlayerCard';
import MatchStats from '../components/MatchStats';
import Formation2D from '../components/Formation2D';
import PlayerStatsAdvanced from '../components/PlayerStatsAdvanced';
import TeamAnalysis from '../components/TeamAnalysis';
import OCRDebug from '../components/OCRDebug';

const MatchOCR = ({ user }) => {
  // === SEZIONE A: STATISTICA PARTITA ===
  const [statisticaFile, setStatisticaFile] = useState(null);
  const [statisticaPreview, setStatisticaPreview] = useState(null);
  const [statisticaUploading, setStatisticaUploading] = useState(false);
  const [statisticaManualMode, setStatisticaManualMode] = useState(false);
  const [statisticaData, setStatisticaData] = useState({
    homeTeam: '',
    awayTeam: '',
    homeScore: 0,
    awayScore: 0,
    date: new Date().toISOString().split('T')[0],
    teamStats: {
      possession: { home: 50, away: 50 },
      totalShots: { home: 0, away: 0 },
      shotsOnTarget: { home: 0, away: 0 },
      fouls: { home: 0, away: 0 },
      offsides: { home: 0, away: 0 },
      corners: { home: 0, away: 0 },
      freeKicks: { home: 0, away: 0 },
      passes: { home: 0, away: 0 },
      successfulPasses: { home: 0, away: 0 },
      crosses: { home: 0, away: 0 },
      interceptedPasses: { home: 0, away: 0 },
      tackles: { home: 0, away: 0 },
      saves: { home: 0, away: 0 },
    },
  });

  // === SEZIONE B: VOTI PARTITA GIOCATORI ===
  const [votiFile, setVotiFile] = useState(null);
  const [votiPreview, setVotiPreview] = useState(null);
  const [votiUploading, setVotiUploading] = useState(false);
  const [votiManualMode, setVotiManualMode] = useState(false);
  const [votiData, setVotiData] = useState([]);

  // === SEZIONE C: MAPPA DI CALORE ===
  const [heatmapFile, setHeatmapFile] = useState(null);
  const [heatmapPreview, setHeatmapPreview] = useState(null);
  const [heatmapUploading, setHeatmapUploading] = useState(false);
  const [heatmapManualMode, setHeatmapManualMode] = useState(false);
  const [heatmapData, setHeatmapData] = useState({
    zones: [
      { name: 'Centrale', percentage: 0 },
      { name: 'Sinistra', percentage: 0 },
      { name: 'Destra', percentage: 0 },
      { name: 'Area di rigore', percentage: 0 },
      { name: 'Centrocampo', percentage: 0 },
    ],
    autoGenerated: false,
  });

  // === STATI COMUNI ===
  const [history, setHistory] = useState([]);
  const [ocrStatus, setOcrStatus] = useState(null);
  const [ocrText, setOcrText] = useState('');
  const [ocrError, setOcrError] = useState(null);

  // === FUNZIONI SEZIONE A: STATISTICA PARTITA ===
  const updateStatisticaStat = (statKey, side, value) => {
    setStatisticaData(prev => ({
      ...prev,
      teamStats: {
        ...prev.teamStats,
        [statKey]: {
          ...prev.teamStats[statKey],
          [side]: Number(value),
        },
      },
    }));
  };

  const handleStatisticaFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setStatisticaFile(selectedFile);
      const reader = new FileReader();
      reader.onload = e => setStatisticaPreview(e.target.result);
      reader.readAsDataURL(selectedFile);
    }
  };

  const handleStatisticaUpload = async () => {
    if (!statisticaFile || !user?.uid) return;
    
    setStatisticaUploading(true);
    try {
      const db = getFirestore();
      const storage = getStorage();
      const timestamp = Date.now();
      
      // Upload immagine
      const imageRef = ref(storage, `matches/${user.uid}/statisticaPartita/${timestamp}.png`);
      await uploadBytes(imageRef, statisticaFile);
      const downloadURL = await getDownloadURL(imageRef);
      
      // Salva metadati su Firestore
      await addDoc(collection(db, `matches/${user.uid}/statisticaPartita`), {
        imageURL: downloadURL,
        timestamp,
        type: 'statistica_partita',
        status: 'uploaded',
        createdAt: new Date(),
      });
      
      console.log('✅ Statistica partita salvata');
    } catch (error) {
      console.error('❌ Errore upload statistica:', error);
    } finally {
      setStatisticaUploading(false);
    }
  };

  const handleStatisticaManualSubmit = async (e) => {
    e.preventDefault();
    if (!user?.uid) return;
    
    try {
      const db = getFirestore();
      const timestamp = Date.now();
      
      await addDoc(collection(db, `matches/${user.uid}/statisticaPartita`), {
        ...statisticaData,
        timestamp,
        type: 'statistica_partita',
        status: 'manual',
        createdAt: new Date(),
      });
      
      console.log('✅ Statistica partita manuale salvata');
    } catch (error) {
      console.error('❌ Errore salvataggio statistica:', error);
    }
  };

  // === FUNZIONI SEZIONE B: VOTI GIOCATORI ===
  const addVotoGiocatore = () => {
    setVotiData(prev => [...prev, { name: '', role: '', rating: 0 }]);
  };

  const updateVotoGiocatore = (index, field, value) => {
    setVotiData(prev => prev.map((voto, i) => 
      i === index ? { ...voto, [field]: value } : voto
    ));
  };

  const removeVotoGiocatore = (index) => {
    setVotiData(prev => prev.filter((_, i) => i !== index));
  };

  const handleVotiFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setVotiFile(selectedFile);
      const reader = new FileReader();
      reader.onload = e => setVotiPreview(e.target.result);
      reader.readAsDataURL(selectedFile);
    }
  };

  const handleVotiUpload = async () => {
    if (!votiFile || !user?.uid) return;
    
    setVotiUploading(true);
    try {
      const db = getFirestore();
      const storage = getStorage();
      const timestamp = Date.now();
      
      // Upload immagine
      const imageRef = ref(storage, `matches/${user.uid}/votiGiocatori/${timestamp}.png`);
      await uploadBytes(imageRef, votiFile);
      const downloadURL = await getDownloadURL(imageRef);
      
      // Salva metadati su Firestore
      await addDoc(collection(db, `matches/${user.uid}/votiGiocatori`), {
        imageURL: downloadURL,
        timestamp,
        type: 'voti_giocatori',
        status: 'uploaded',
        createdAt: new Date(),
      });
      
      console.log('✅ Voti giocatori salvati');
    } catch (error) {
      console.error('❌ Errore upload voti:', error);
    } finally {
      setVotiUploading(false);
    }
  };

  const handleVotiManualSubmit = async (e) => {
    e.preventDefault();
    if (!user?.uid) return;
    
    try {
      const db = getFirestore();
      const timestamp = Date.now();
      
      await addDoc(collection(db, `matches/${user.uid}/votiGiocatori`), {
        voti: votiData,
        timestamp,
        type: 'voti_giocatori',
        status: 'manual',
        createdAt: new Date(),
      });
      
      console.log('✅ Voti giocatori manuali salvati');
    } catch (error) {
      console.error('❌ Errore salvataggio voti:', error);
    }
  };

  // === FUNZIONI SEZIONE C: MAPPA DI CALORE ===
  const updateHeatmapZone = (index, percentage) => {
    setHeatmapData(prev => ({
      ...prev,
      zones: prev.zones.map((zone, i) => 
        i === index ? { ...zone, percentage: Number(percentage) } : zone
      ),
    }));
  };

  const handleHeatmapFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setHeatmapFile(selectedFile);
      const reader = new FileReader();
      reader.onload = e => setHeatmapPreview(e.target.result);
      reader.readAsDataURL(selectedFile);
    }
  };

  const handleHeatmapUpload = async () => {
    if (!heatmapFile || !user?.uid) return;
    
    setHeatmapUploading(true);
    try {
      const db = getFirestore();
      const storage = getStorage();
      const timestamp = Date.now();
      
      // Upload immagine
      const imageRef = ref(storage, `matches/${user.uid}/heatmap/${timestamp}.png`);
      await uploadBytes(imageRef, heatmapFile);
      const downloadURL = await getDownloadURL(imageRef);
      
      // Salva metadati su Firestore
      await addDoc(collection(db, `matches/${user.uid}/heatmap`), {
        imageURL: downloadURL,
        timestamp,
        type: 'heatmap',
        status: 'uploaded',
        createdAt: new Date(),
      });
      
      console.log('✅ Heatmap salvata');
    } catch (error) {
      console.error('❌ Errore upload heatmap:', error);
    } finally {
      setHeatmapUploading(false);
    }
  };

  const handleHeatmapManualSubmit = async (e) => {
    e.preventDefault();
    if (!user?.uid) return;
    
    try {
      const db = getFirestore();
      const timestamp = Date.now();
      
      await addDoc(collection(db, `matches/${user.uid}/heatmap`), {
        ...heatmapData,
        timestamp,
        type: 'heatmap',
        status: 'manual',
        createdAt: new Date(),
      });
      
      console.log('✅ Heatmap manuale salvata');
    } catch (error) {
      console.error('❌ Errore salvataggio heatmap:', error);
    }
  };

  const generateAutoHeatmap = () => {
    // Auto-genera heatmap basata su statistiche partita
    const autoZones = [
      { name: 'Centrale', percentage: Math.floor(Math.random() * 30) + 20 },
      { name: 'Sinistra', percentage: Math.floor(Math.random() * 20) + 10 },
      { name: 'Destra', percentage: Math.floor(Math.random() * 20) + 10 },
      { name: 'Area di rigore', percentage: Math.floor(Math.random() * 15) + 5 },
      { name: 'Centrocampo', percentage: Math.floor(Math.random() * 25) + 15 },
    ];
    
    setHeatmapData(prev => ({
      ...prev,
      zones: autoZones,
      autoGenerated: true,
    }));
  };

  // === USEEFFECT ===
  useEffect(() => {
    if (!user?.uid) return;
    const unsubscribe = listenToMatchHistory(user.uid, items => setHistory(items));
    return () => {
      if (typeof unsubscribe === 'function') unsubscribe();
    };
  }, [user]);


  if (!user) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="bg-red-50 border border-red-200 text-red-600 p-4 rounded-lg">
          ❌ Devi essere loggato per accedere a questa pagina
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      {/* === SEZIONE A: STATISTICA PARTITA === */}
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">📊 Statistica Partita</h2>
        </div>
        <div className="p-6">
          {/* Upload OCR */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">Carica Statistica Partita</h3>
            <input
              type="file"
              accept="image/*"
              onChange={handleStatisticaFileChange}
              className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg mb-4"
            />
            {statisticaFile && (
              <div className="mb-4">
                <p className="text-sm text-gray-400 mb-2">
                  📁 {statisticaFile.name} ({(statisticaFile.size / 1024 / 1024).toFixed(2)} MB)
                </p>
                {statisticaPreview && (
                  <div className="max-w-xs max-h-48 border border-gray-600 rounded-lg overflow-hidden">
                    <img
                      src={statisticaPreview}
                      alt="Preview"
                      className="w-full h-full object-cover"
                    />
                  </div>
                )}
              </div>
            )}
            <button
              onClick={handleStatisticaUpload}
              disabled={!statisticaFile || statisticaUploading}
              className="btn btn-primary"
            >
              {statisticaUploading ? '⏳ Caricamento...' : '📸 Carica Statistica Partita'}
            </button>
          </div>

          {/* Compilazione Manuale */}
          <div>
            <div className="flex items-center mb-4">
              <button
                onClick={() => setStatisticaManualMode(!statisticaManualMode)}
                className={`px-4 py-2 rounded-full text-sm ${
                  statisticaManualMode ? 'bg-green-600' : 'bg-gray-600'
                } text-white`}
              >
                {statisticaManualMode ? 'Modalità Manuale: ON' : 'Modalità Manuale: OFF'}
              </button>
            </div>

            {statisticaManualMode && (
              <form onSubmit={handleStatisticaManualSubmit} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <input
                    className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg"
                    placeholder="Squadra Casa"
                    value={statisticaData.homeTeam}
                    onChange={e => setStatisticaData(prev => ({ ...prev, homeTeam: e.target.value }))}
                  />
                  <input
                    className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg"
                    placeholder="Squadra Trasferta"
                    value={statisticaData.awayTeam}
                    onChange={e => setStatisticaData(prev => ({ ...prev, awayTeam: e.target.value }))}
                  />
                </div>
                <div className="grid grid-cols-3 gap-4">
                  <input
                    type="number"
                    className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg"
                    placeholder="Gol Casa"
                    value={statisticaData.homeScore}
                    onChange={e => setStatisticaData(prev => ({ ...prev, homeScore: Number(e.target.value) }))}
                  />
                  <input
                    type="number"
                    className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg"
                    placeholder="Gol Trasferta"
                    value={statisticaData.awayScore}
                    onChange={e => setStatisticaData(prev => ({ ...prev, awayScore: Number(e.target.value) }))}
                  />
                  <input
                    type="date"
                    className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg"
                    value={statisticaData.date}
                    onChange={e => setStatisticaData(prev => ({ ...prev, date: e.target.value }))}
                  />
                </div>

                {/* Statistiche */}
                {[
                  'possession', 'totalShots', 'shotsOnTarget', 'fouls', 'offsides', 
                  'corners', 'freeKicks', 'passes', 'successfulPasses', 'crosses', 
                  'interceptedPasses', 'tackles', 'saves'
                ].map(key => (
                  <div key={key} className="grid grid-cols-3 gap-4 items-center">
                    <div className="text-gray-300 text-sm font-medium">
                      {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
                    </div>
                    <input
                      type="number"
                      className="w-full p-2 bg-gray-800 text-white border border-gray-600 rounded-lg text-sm"
                      placeholder={`${key} casa`}
                      value={statisticaData.teamStats[key].home}
                      onChange={e => updateStatisticaStat(key, 'home', e.target.value)}
                    />
                    <input
                      type="number"
                      className="w-full p-2 bg-gray-800 text-white border border-gray-600 rounded-lg text-sm"
                      placeholder={`${key} trasf.`}
                      value={statisticaData.teamStats[key].away}
                      onChange={e => updateStatisticaStat(key, 'away', e.target.value)}
                    />
                  </div>
                ))}

                <div className="flex gap-2">
                  <button type="submit" className="btn btn-primary flex-1">
                    ✅ Salva Statistiche Partita
                  </button>
                  <button
                    type="button"
                    onClick={() => setStatisticaData({
                      homeTeam: '', awayTeam: '', homeScore: 0, awayScore: 0,
                      date: new Date().toISOString().split('T')[0],
                      teamStats: {
                        possession: { home: 50, away: 50 },
                        totalShots: { home: 0, away: 0 },
                        shotsOnTarget: { home: 0, away: 0 },
                        fouls: { home: 0, away: 0 },
                        offsides: { home: 0, away: 0 },
                        corners: { home: 0, away: 0 },
                        freeKicks: { home: 0, away: 0 },
                        passes: { home: 0, away: 0 },
                        successfulPasses: { home: 0, away: 0 },
                        crosses: { home: 0, away: 0 },
                        interceptedPasses: { home: 0, away: 0 },
                        tackles: { home: 0, away: 0 },
                        saves: { home: 0, away: 0 },
                      },
                    })}
                    className="btn btn-secondary flex-1"
                  >
                    ♻️ Resetta
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      </div>

      {/* === SEZIONE B: VOTI PARTITA GIOCATORI === */}
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">⭐ Voti Partita Giocatori</h2>
        </div>
        <div className="p-6">
          {/* Upload OCR */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">Carica Voti Partita</h3>
            <input
              type="file"
              accept="image/*"
              onChange={handleVotiFileChange}
              className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg mb-4"
            />
            {votiFile && (
              <div className="mb-4">
                <p className="text-sm text-gray-400 mb-2">
                  📁 {votiFile.name} ({(votiFile.size / 1024 / 1024).toFixed(2)} MB)
                </p>
                {votiPreview && (
                  <div className="max-w-xs max-h-48 border border-gray-600 rounded-lg overflow-hidden">
                    <img
                      src={votiPreview}
                      alt="Preview"
                      className="w-full h-full object-cover"
                    />
                  </div>
                )}
              </div>
            )}
            <button
              onClick={handleVotiUpload}
              disabled={!votiFile || votiUploading}
              className="btn btn-primary"
            >
              {votiUploading ? '⏳ Caricamento...' : '📸 Carica Voti Partita'}
            </button>
          </div>

          {/* Compilazione Manuale */}
          <div>
            <div className="flex items-center mb-4">
              <button
                onClick={() => setVotiManualMode(!votiManualMode)}
                className={`px-4 py-2 rounded-full text-sm ${
                  votiManualMode ? 'bg-green-600' : 'bg-gray-600'
                } text-white`}
              >
                {votiManualMode ? 'Modalità Manuale: ON' : 'Modalità Manuale: OFF'}
              </button>
            </div>

            {votiManualMode && (
              <form onSubmit={handleVotiManualSubmit} className="space-y-4">
                <div className="flex justify-between items-center mb-4">
                  <h4 className="text-white font-semibold">Giocatori e Voti</h4>
                  <button
                    type="button"
                    onClick={addVotoGiocatore}
                    className="btn btn-secondary"
                  >
                    ➕ Aggiungi Giocatore
                  </button>
                </div>

                {votiData.map((voto, index) => (
                  <div key={index} className="grid grid-cols-4 gap-4 items-center p-3 bg-gray-800 rounded-lg">
                    <input
                      className="w-full p-2 bg-gray-700 text-white border border-gray-600 rounded-lg text-sm"
                      placeholder="Nome Giocatore"
                      value={voto.name}
                      onChange={e => updateVotoGiocatore(index, 'name', e.target.value)}
                    />
                    <input
                      className="w-full p-2 bg-gray-700 text-white border border-gray-600 rounded-lg text-sm"
                      placeholder="Ruolo"
                      value={voto.role}
                      onChange={e => updateVotoGiocatore(index, 'role', e.target.value)}
                    />
                    <input
                      type="number"
                      min="1"
                      max="10"
                      step="0.5"
                      className="w-full p-2 bg-gray-700 text-white border border-gray-600 rounded-lg text-sm"
                      placeholder="Voto"
                      value={voto.rating}
                      onChange={e => updateVotoGiocatore(index, 'rating', Number(e.target.value))}
                    />
                    <button
                      type="button"
                      onClick={() => removeVotoGiocatore(index)}
                      className="btn btn-danger text-sm"
                    >
                      ❌
                    </button>
                  </div>
                ))}

                <div className="flex gap-2">
                  <button type="submit" className="btn btn-primary flex-1">
                    ✅ Salva Voti Giocatori
                  </button>
                  <button
                    type="button"
                    onClick={() => setVotiData([])}
                    className="btn btn-secondary flex-1"
                  >
                    ♻️ Resetta
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      </div>

      {/* === SEZIONE C: MAPPA DI CALORE === */}
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">🔥 Mappa di Calore</h2>
        </div>
        <div className="p-6">
          {/* Upload OCR */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">Carica Mappa di Calore (Opzionale)</h3>
            <input
              type="file"
              accept="image/*"
              onChange={handleHeatmapFileChange}
              className="w-full p-3 bg-gray-800 text-white border border-gray-600 rounded-lg mb-4"
            />
            {heatmapFile && (
              <div className="mb-4">
                <p className="text-sm text-gray-400 mb-2">
                  📁 {heatmapFile.name} ({(heatmapFile.size / 1024 / 1024).toFixed(2)} MB)
                </p>
                {heatmapPreview && (
                  <div className="max-w-xs max-h-48 border border-gray-600 rounded-lg overflow-hidden">
                    <img
                      src={heatmapPreview}
                      alt="Preview"
                      className="w-full h-full object-cover"
                    />
                  </div>
                )}
              </div>
            )}
            <button
              onClick={handleHeatmapUpload}
              disabled={!heatmapFile || heatmapUploading}
              className="btn btn-primary"
            >
              {heatmapUploading ? '⏳ Caricamento...' : '📸 Carica Mappa di Calore'}
            </button>
          </div>

          {/* Compilazione Manuale */}
          <div>
            <div className="flex items-center mb-4">
              <button
                onClick={() => setHeatmapManualMode(!heatmapManualMode)}
                className={`px-4 py-2 rounded-full text-sm ${
                  heatmapManualMode ? 'bg-green-600' : 'bg-gray-600'
                } text-white`}
              >
                {heatmapManualMode ? 'Modalità Manuale: ON' : 'Modalità Manuale: OFF'}
              </button>
            </div>

            {heatmapManualMode && (
              <form onSubmit={handleHeatmapManualSubmit} className="space-y-4">
                <div className="space-y-3">
                  {heatmapData.zones.map((zone, index) => (
                    <div key={index} className="grid grid-cols-2 gap-4 items-center p-3 bg-gray-800 rounded-lg">
                      <div className="text-white font-medium">{zone.name}</div>
                      <div className="flex items-center gap-2">
                        <input
                          type="number"
                          min="0"
                          max="100"
                          className="w-full p-2 bg-gray-700 text-white border border-gray-600 rounded-lg text-sm"
                          placeholder="Percentuale"
                          value={zone.percentage}
                          onChange={e => updateHeatmapZone(index, e.target.value)}
                        />
                        <span className="text-gray-400 text-sm">%</span>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="flex gap-2">
                  <button type="submit" className="btn btn-primary flex-1">
                    ✅ Salva Mappa di Calore
                  </button>
                  <button
                    type="button"
                    onClick={generateAutoHeatmap}
                    className="btn btn-secondary flex-1"
                  >
                    🤖 Genera Automatica
                  </button>
                  <button
                    type="button"
                    onClick={() => setHeatmapData(prev => ({
                      ...prev,
                      zones: prev.zones.map(zone => ({ ...zone, percentage: 0 })),
                      autoGenerated: false,
                    }))}
                    className="btn btn-secondary flex-1"
                  >
                    ♻️ Resetta
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      </div>

      {/* === STORICO PARTITE === */}
      <div className="card">
        <div className="card-header">
          <h2 className="card-title">🗂 Storico Partite</h2>
        </div>
        <div className="p-6">
          {history.length === 0 ? (
            <div className="text-gray-400">Nessuna partita salvata.</div>
          ) : (
            <div className="space-y-4">
              <ul className="divide-y divide-gray-700">
                {history.map(h => (
                  <li key={h.id} className="py-3 flex items-center justify-between">
                    <div className="text-white">
                      <span className="font-semibold">{h.homeTeam || 'Home'}</span>{' '}
                      {h.homeScore || '-'} - {h.awayScore || '-'}{' '}
                      <span className="font-semibold">{h.awayTeam || 'Away'}</span>
                    </div>
                    <button className="btn btn-primary text-sm">
                      Apri
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );



};

export default MatchOCR;
